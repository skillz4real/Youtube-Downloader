#!/usr/bin/python3

from pytube import Playlist, YouTube, Channel
from pytube.cli import on_progress
import os
import sys
import logging
from datetime import datetime


class Downloader:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(filename=f"{os.getenv('HOME')}/.ytdl.log", level=logging.INFO)

    def oauth(self):
        """Auth function"""
        print("As part of the authentication process YtDl will download a sample video")
        print("Please follow the instructions")
        YouTube("https://www.youtube.com/watch?v=K4TOrB7at0Y",use_oauth=True,allow_oauth_cache=True,on_progress_callback=on_progress).streams.order_by("resolution").first().download()
    
    def download_playlist(self, url, verbose, audio_only, output, quiet):
        """Downloading the playlist in a folder with same title"""
        playlist = Playlist(url)
        audio_only = audio_only
        try:
            directory = playlist.title
        except KeyError:
            if not quiet:
                raise Exception(f"This playlist is not publicly available. Either use authentication flag or set it as public")
            self.logger.critical(f"{datetime.now()} This playlist is not publicly available. Either use authentication flag or set it as public. url = {url}")
            sys.exit(1) 
        except:
            if not quiet:
                sys.stderr.write("There was a bug here while trying to get the playlist title")
            self.logger.warning(f"{datetime.now()} There was a Bug while trying to get the playlist title. ")
            directory = "Playlist"

        self.prepping_dir(path=output, dir=directory)

        for vid in playlist:
            self.download_video(url=video,verbose=verbose,audio_only=audio_only,quiet=quiet)
    
    def check_if_exist(self, title:str, ext:str, audio_only:bool, verbose:bool):
        #list directory
        folder_content = os.listdir()
        if audio_only:
            audio = "_audio"
        else:
            audio = ""
        #check if title + ext + audio is in the folder 
        if f"{title}{audio}.{ext}" in folder_content:
            if verbose:
                print(f"skipping {title}")
            self.logger.info(f"{datetime.now()} skipping {title}")
            return 1
        else:
            return 0

    def download_video(self, url, verbose, audio_only, quiet, output="./"):
        """downloads single video, Uses Progressive download"""
        if verbose:
            vid = YouTube(url,on_progress_callback=on_progress)
        else:
            vid = YouTube(url)
        
        self.prepping_dir(path=output)

        if audio_only:
            stream = vid.streams.filter(only_audio=audio_only).filter(file_extension="mp4").last()
            title = stream.title
            ext = stream.mime_type.split('/')[1] 
            if verbose:
                print(f"\nChecking if \"{title}\" was already downloaded\n")
            skip = self.check_if_exist(title,ext,audio_only,verbose)
            if not skip:
                if verbose:
                    print(f"\nDownloading \"{title}\" \n")
                self.logger.info(f"{datetime.now()} downloading {title}")
                stream.download()
                #tries to rename to title_audio but fails if title contains symbols like ',. etc... because of unix stuff the files are strip from that so the rename function fails to find the file by title
                try:
                    os.rename(f"{title}.{ext}", f"{title}_audio.{ext}")
                except FileNotFoundError: 
                    title = self.cleanstr(title)
                    try:
                        os.rename(f"{title}.{ext}", f"{title}_audio.{ext}")
                    except FileNotFoundError:
                        if not quiet:
                            raise Exception("Bug in title sanitization check line 93")
                        self.logger.critical(f"{datetime.now()} Bug in title sanitization check line 93 of main module")
                        sys.exit(1)

                    
        else:
            stream = vid.streams.order_by("resolution").filter(progressive=True).last()
            title = stream.title
            ext = stream.mime_type.split('/')[1]
            if verbose:
                print(f"Checking if {title} was already downloaded")
            skip = self.check_if_exist(title,ext,audio_only,verbose)
            if not skip:
                if verbose:
                    print(f"\nDownloading {title}\n")
                self.logger.info(f"{datetime.now()} Downloading {title}")
                stream.download()
    
    def cleanstr(self, s:str):
        """Operating systems tend to rename files to drop certain characters. This function does the same so that our new cleaned file will match the actual file name in the filesystem"""
        symbols = [",","'",".",'"','?']    # add any symbol i forgot here
        # list(map(lambda x: s.replace(x, " "), symbols)) This won't work because we are trying to apply a function with a list of inputs to a single object and return the final result. the object will go through a bunch of iterations before we return the final result
        for symbol in symbols:
            s = s.replace(symbol, "")
        return s

    def download_channel(self, url, verbose, audio_only, output, quiet):
        """Downloads the entire content of a Youtube Channel"""
        c = Channel(YouTube(url).channel_url)

        #user needs to make sure the playlist is set to Public on YouTube
        try:
            directory = c.channel_name
        except:
            if not quiet:
                sys.stderr.write(f"There was a bug trying to get the channel name.")
            self.logger.warning(f"{datetime.now()} There was a bug trying to get the channel name")
            directory = "Channel"
        
        self.prepping_dir(path=output,dir=directory)
        for video in c:
            self.download_video(url=video,verbose=verbose,audio_only=audio_only,quiet=quiet)
   

    def prepping_dir(self, path="./", dir=""):
        #creating folder to download videos will fail if user doesn't have appropriate permissions
        try:
            os.chdir(f"{path}")
            os.mkdir(f'{dir}')
            os.chdir(f"{dir}")
        except:
            try:
                os.chdir(f"{path}/{dir}")
            except PermissionError as pe:
                if not quiet:
                    raise PermissionError(f"check write permissions for {path}")
                sys.exit(1)
            except:
                sys.stderr.write("Bug while changing directory")
                self.logger.critical("Bug while changing directory")
                sys.exit(1)



if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        prog = "ytdl",
        description = "Downloads video and audio content from Youtube",
        epilog=""
            )

    parser.add_argument("-V", "--video", help="takes in the url to a video and downloads it")
    parser.add_argument("-a","--audio-only", action="store_true", help="specifies audio only", default=False, dest="audio_only")
    parser.add_argument('-v',"--verbose", action="store_true", help="Set verbose", default=False)
    parser.add_argument("-c", "--channel", help="takes in the url to a video and downloads to channel the video is from")
    parser.add_argument("-p", "--playlist", help="takes in the link to a playlist")
    parser.add_argument("--auth", action="store_true", help="authenticate using oauth, this will open a browser in your window")
    parser.add_argument("-o", "--output", default="./", help="output content to a folder. omit any trailing /, don't use any shortcut like ~ for the home directory, can use environment variables if you know what you are doing")
    parser.add_argument("-q", "--quiet", default=False, help="Do not output any messages to the terminal. In case of failure/bug check logs in home directory", action="store_true")
    args = parser.parse_args()

    if args.video and (args.playlist or args.channel):
        raise Exception("can't define video and playlist or channel at the same time")
        sys.exit(1)

    if args.channel and (args.playlist or args.video):
        raise Exception("can't define channel and playlist or video at the same time")
        sys.exit(1)

    if args.playlist and (args.channel or args.video):
        raise Exception("can't define playlist and video or channel at the same time")
        sys.exit(1)
    
    asset = args.video or args.channel or args.playlist

    try:
        assert asset
    except AssertionError:
        raise Exception("You have to define some sort of asset (a video, a playlist or a channel)")
        sys.exit(1)
    
    bot = Downloader()
    if args.auth:
        bot.oauth()

    if args.video:
        bot.logger.info(f"{datetime.now()} Downloading a video")
        bot.download_video(url=args.video, verbose=args.verbose, audio_only=args.audio_only, output=args.output, quiet=args.quiet)
    elif args.playlist:
        bot.logger.info(f"{datetime.now()} Downloading content from a Playlist")
        bot.download_playlist(url=args.playlist, verbose=args.verbose, audio_only=args.audio_only, output=args.output, quiet=args.quiet)
    elif args.channel:
        bot.logger.info(f"{datetime.now()} Downloading content from a channel")
        bot.download_channel(url=args.channel, verbose=args.verbose, audio_only=args.audio_only, output=args.output, quiet=args.quiet)
    else:
        print("Error parsing asset argument")
        bot.logger.critical(f"{datetime.now()} error parsing args")
        sys.exit(1)
    bot.logger.info(f"{datetime.now()} Done")
